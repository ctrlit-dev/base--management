# Generated by Django 5.0.8 on 2025-10-16 22:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Eindeutige E-Mail-Adresse für Anmeldung und Benachrichtigungen",
                        max_length=254,
                        unique=True,
                        verbose_name="E-Mail-Adresse",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Administrator"),
                            ("PRODUCTION", "Produktion"),
                            ("WAREHOUSE", "Lager"),
                            ("SALES", "Verkauf"),
                            ("VIEWER", "Betrachter"),
                        ],
                        default="VIEWER",
                        help_text="Rolle bestimmt die verfügbaren Funktionen im System",
                        max_length=20,
                        verbose_name="Benutzerrolle",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Markiert den Benutzer als gelöscht (Soft-Delete)",
                        verbose_name="Gelöscht",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Zeitpunkt der Löschung",
                        null=True,
                        verbose_name="Gelöscht am",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="Optionales Profilbild des Benutzers",
                        null=True,
                        upload_to="avatars/",
                        verbose_name="Profilbild",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="de-DE",
                        help_text="Bevorzugte Sprache des Benutzers",
                        max_length=5,
                        verbose_name="Sprache",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="Europe/Berlin",
                        help_text="Bevorzugte Zeitzone des Benutzers",
                        max_length=50,
                        verbose_name="Zeitzone",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Erstellt am"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Aktualisiert am"),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Benutzer, der die Löschung durchgeführt hat",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="deleted_users",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Gelöscht von",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Benutzer",
                "verbose_name_plural": "Benutzer",
                "ordering": ["last_name", "first_name"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PasskeyCredential",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "credential_id",
                    models.CharField(
                        help_text="Eindeutige Kennung des Passkey-Credentials",
                        max_length=255,
                        unique=True,
                        verbose_name="Credential-ID",
                    ),
                ),
                (
                    "public_key",
                    models.TextField(
                        help_text="Öffentlicher Schlüssel für Verifikation der Authentifizierung",
                        verbose_name="Öffentlicher Schlüssel",
                    ),
                ),
                (
                    "sign_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Anzahl der erfolgreichen Authentifizierungen (Replay-Schutz)",
                        verbose_name="Sign Count",
                    ),
                ),
                (
                    "transports",
                    models.JSONField(
                        default=list,
                        help_text="Verfügbare Transport-Methoden für das Credential",
                        verbose_name="Transport-Methoden",
                    ),
                ),
                (
                    "attestation_type",
                    models.CharField(
                        help_text="Typ der Attestation (none, indirect, direct, enterprise)",
                        max_length=50,
                        verbose_name="Attestation-Typ",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Erstellt am"),
                ),
                (
                    "last_used_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Zuletzt verwendet am"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Benutzer, dem dieses Passkey-Credential gehört",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="passkey_credentials",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Benutzer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Passkey-Credential",
                "verbose_name_plural": "Passkey-Credentials",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="E-Mail-Benachrichtigungen aktiviert",
                        verbose_name="Benachrichtigungen aktiviert",
                    ),
                ),
                (
                    "dashboard_widgets",
                    models.JSONField(
                        default=dict,
                        help_text="Konfiguration der Dashboard-Widgets",
                        verbose_name="Dashboard-Widgets",
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Letzte Login-IP"
                    ),
                ),
                (
                    "last_login_user_agent",
                    models.TextField(
                        blank=True, null=True, verbose_name="Letzter User-Agent"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Erstellt am"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Aktualisiert am"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Benutzer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Benutzerprofil",
                "verbose_name_plural": "Benutzerprofile",
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="accounts_us_email_74c8d6_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["role"], name="accounts_us_role_1fa9a5_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_deleted"], name="accounts_us_is_dele_1bd6d7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["created_at"], name="accounts_us_created_4734df_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="passkeycredential",
            index=models.Index(
                fields=["credential_id"], name="accounts_pa_credent_1e89fd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="passkeycredential",
            index=models.Index(fields=["user"], name="accounts_pa_user_id_d4a59b_idx"),
        ),
        migrations.AddIndex(
            model_name="passkeycredential",
            index=models.Index(
                fields=["created_at"], name="accounts_pa_created_433b8f_idx"
            ),
        ),
    ]
