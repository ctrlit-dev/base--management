# Generated by Django 5.0.8 on 2025-10-16 22:59

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("orders", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Fragrance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "internal_code",
                    models.CharField(
                        help_text="Eindeutige interne Kennung des Dufts (z.B. M-001)",
                        max_length=20,
                        unique=True,
                        verbose_name="Interner Code",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Männlich"), ("W", "Weiblich"), ("U", "Unisex")],
                        help_text="Geschlechtsspezifische Kategorisierung des Dufts",
                        max_length=1,
                        verbose_name="Geschlecht",
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        help_text="Marke des Dufts",
                        max_length=100,
                        verbose_name="Marke",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name des Dufts", max_length=100, verbose_name="Name"
                    ),
                ),
                (
                    "official_name",
                    models.CharField(
                        help_text="Vollständiger offizieller Name (Marke - Produkt)",
                        max_length=200,
                        verbose_name="Offizieller Name",
                    ),
                ),
                (
                    "family",
                    models.CharField(
                        blank=True,
                        help_text="Duftfamilie (z.B. Orientalisch, Blumig, Holz)",
                        max_length=100,
                        null=True,
                        verbose_name="Duftfamilie",
                    ),
                ),
                (
                    "top_notes",
                    models.JSONField(
                        default=list,
                        help_text="Liste der Kopfnoten",
                        verbose_name="Kopfnoten",
                    ),
                ),
                (
                    "heart_notes",
                    models.JSONField(
                        default=list,
                        help_text="Liste der Herznoten",
                        verbose_name="Herznoten",
                    ),
                ),
                (
                    "base_notes",
                    models.JSONField(
                        default=list,
                        help_text="Liste der Basisnoten",
                        verbose_name="Basisnoten",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detaillierte Beschreibung des Dufts",
                        null=True,
                        verbose_name="Beschreibung",
                    ),
                ),
                (
                    "hero_image",
                    models.ImageField(
                        blank=True,
                        help_text="Hauptbild des Dufts",
                        null=True,
                        upload_to="fragrances/",
                        verbose_name="Hauptbild",
                    ),
                ),
                (
                    "parfumo_url",
                    models.URLField(
                        blank=True,
                        help_text="Link zur Parfumo-Seite",
                        null=True,
                        verbose_name="Parfumo-URL",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Markiert den Duft als gelöscht (Soft-Delete)",
                        verbose_name="Gelöscht",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Zeitpunkt der Löschung",
                        null=True,
                        verbose_name="Gelöscht am",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Erstellt am"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Aktualisiert am"),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Benutzer, der die Löschung durchgeführt hat",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="deleted_fragrances",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Gelöscht von",
                    ),
                ),
            ],
            options={
                "verbose_name": "Duft",
                "verbose_name_plural": "Düfte",
                "ordering": ["internal_code"],
            },
        ),
        migrations.CreateModel(
            name="OilBatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        help_text="Eindeutiger Barcode der Öl-Charge",
                        max_length=100,
                        unique=True,
                        verbose_name="Barcode",
                    ),
                ),
                (
                    "qty_ml",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Verfügbare Menge in Millilitern",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Menge (ml)",
                    ),
                ),
                (
                    "cost_total",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Gesamtkosten der Öl-Charge",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                        verbose_name="Gesamtkosten",
                    ),
                ),
                (
                    "cost_per_ml",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Kosten pro Milliliter",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                        verbose_name="Kosten pro ml",
                    ),
                ),
                (
                    "received_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Zeitpunkt des Wareneingangs",
                        verbose_name="Eingegangen am",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Ablaufdatum der Öl-Charge (optional)",
                        null=True,
                        verbose_name="Ablaufdatum",
                    ),
                ),
                (
                    "theoretical_volume_ml",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Theoretisches Volumen der Charge",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Theoretisches Volumen (ml)",
                    ),
                ),
                (
                    "measured_volume_ml",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Tatsächlich gemessenes Volumen (nach Kalibrierung)",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Gemessenes Volumen (ml)",
                    ),
                ),
                (
                    "tolerance_percent",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("3.0"),
                        help_text="Akzeptable Toleranz in Prozent",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0")),
                            django.core.validators.MaxValueValidator(Decimal("100.0")),
                        ],
                        verbose_name="Toleranz (%)",
                    ),
                ),
                (
                    "last_verified_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Zeitpunkt der letzten Kalibrierung",
                        null=True,
                        verbose_name="Zuletzt verifiziert am",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Verfügbar"),
                            ("LOCKED", "Gesperrt"),
                            ("EXHAUSTED", "Aufgebraucht"),
                        ],
                        default="AVAILABLE",
                        help_text="Aktueller Status der Öl-Charge",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Markiert die Öl-Charge als gelöscht (Soft-Delete)",
                        verbose_name="Gelöscht",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Zeitpunkt der Löschung",
                        null=True,
                        verbose_name="Gelöscht am",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Erstellt am"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Aktualisiert am"),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Benutzer, der die Löschung durchgeführt hat",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="deleted_oil_batches",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Gelöscht von",
                    ),
                ),
                (
                    "fragrance",
                    models.ForeignKey(
                        help_text="Duft, zu dem diese Öl-Charge gehört",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="oil_batches",
                        to="fragrances.fragrance",
                        verbose_name="Duft",
                    ),
                ),
                (
                    "order_item",
                    models.ForeignKey(
                        blank=True,
                        help_text="Bestellposition, aus der diese Charge stammt",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="oil_batches",
                        to="orders.orderitem",
                        verbose_name="Bestellposition",
                    ),
                ),
            ],
            options={
                "verbose_name": "Öl-Charge",
                "verbose_name_plural": "Öl-Chargen",
                "ordering": ["-received_at"],
            },
        ),
        migrations.AddIndex(
            model_name="fragrance",
            index=models.Index(
                fields=["internal_code"], name="fragrances__interna_46e108_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fragrance",
            index=models.Index(fields=["gender"], name="fragrances__gender_d2b938_idx"),
        ),
        migrations.AddIndex(
            model_name="fragrance",
            index=models.Index(fields=["brand"], name="fragrances__brand_5ba7b1_idx"),
        ),
        migrations.AddIndex(
            model_name="fragrance",
            index=models.Index(
                fields=["is_deleted"], name="fragrances__is_dele_93476e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fragrance",
            index=models.Index(
                fields=["created_at"], name="fragrances__created_7569b7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="oilbatch",
            index=models.Index(
                fields=["barcode"], name="fragrances__barcode_b6069d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="oilbatch",
            index=models.Index(
                fields=["fragrance"], name="fragrances__fragran_4e54d0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="oilbatch",
            index=models.Index(fields=["status"], name="fragrances__status_d24664_idx"),
        ),
        migrations.AddIndex(
            model_name="oilbatch",
            index=models.Index(
                fields=["is_deleted"], name="fragrances__is_dele_bb285e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="oilbatch",
            index=models.Index(
                fields=["received_at"], name="fragrances__receive_01807b_idx"
            ),
        ),
    ]
